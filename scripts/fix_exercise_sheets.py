#!/usr/bin/env python3
"""
Script pour corriger automatiquement les fiches d'exercices probl√©matiques.
Utilise le syst√®me de templates pour standardiser la structure.
"""

import os
import sys
import re
from pathlib import Path
from typing import List, Dict
from bs4 import BeautifulSoup

class ExerciseSheetFixer:
    def __init__(self, templates_dir: str):
        self.templates_dir = Path(templates_dir)
        
        # Charger le template de base
        base_template_path = self.templates_dir / "base_exercise_template.html"
        if base_template_path.exists():
            with open(base_template_path, 'r', encoding='utf-8') as f:
                self.base_template = f.read()
        else:
            print(f"‚ùå Template de base non trouv√©: {base_template_path}")
            sys.exit(1)
    
    def extract_existing_content(self, html_content: str) -> Dict:
        """
        Extrait le contenu existant d'une fiche d'exercices.
        """
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # Extraire le titre
        title_tag = soup.find('title')
        title = title_tag.get_text().strip() if title_tag else "Fiche d'exercices"
        
        # Extraire le titre principal (h1)
        h1_tag = soup.find('h1')
        main_title = h1_tag.get_text().strip() if h1_tag else title
        
        # Extraire les exercices existants
        exercise_cards = soup.find_all('div', class_='exercise-card')
        
        exercises = {
            'intro': [],
            'easy': [],
            'medium': [],
            'hard': []
        }
        
        for card in exercise_cards:
            # D√©terminer la difficult√©
            difficulty = 'easy'  # Par d√©faut
            if 'intro' in card.get('class', []):
                difficulty = 'intro'
            elif 'medium' in card.get('class', []):
                difficulty = 'medium'
            elif 'hard' in card.get('class', []):
                difficulty = 'hard'
            
            # Extraire le contenu
            title_elem = card.find('h3')
            exercise_title = title_elem.get_text().strip() if title_elem else "Exercice"
            
            content_elem = card.find('div', class_='exercise-content')
            exercise_content = str(content_elem) if content_elem else "<p>Contenu √† d√©finir</p>"
            
            solution_elem = card.find('div', class_='solution')
            solution_content = str(solution_elem) if solution_elem else "<p>Solution √† d√©finir</p>"
            
            exercises[difficulty].append({
                'title': exercise_title,
                'content': exercise_content,
                'solution': solution_content
            })
        
        return {
            'title': title,
            'main_title': main_title,
            'exercises': exercises
        }
    
    def generate_introduction_section(self, subject: str) -> str:
        """
        G√©n√®re une section d'introduction bas√©e sur le sujet.
        """
        introductions = {
            'rappels': {
                'topic': 'Rappels de Premi√®re',
                'description': 'Cette fiche d\'exercices vous permet de r√©viser les concepts fondamentaux vus en Premi√®re.',
                'tips': 'Prenez le temps de bien comprendre chaque concept avant de passer aux exercices plus complexes.'
            },
            'arbres': {
                'topic': 'Structures d\'arbres',
                'description': 'Les arbres sont des structures de donn√©es hi√©rarchiques fondamentales en informatique.',
                'tips': 'Visualisez toujours la structure de l\'arbre avant d\'√©crire votre code.'
            },
            'graphes': {
                'topic': 'Th√©orie des graphes',
                'description': 'Les graphes permettent de mod√©liser de nombreux probl√®mes r√©els.',
                'tips': 'Identifiez d\'abord le type de graphe (orient√©/non-orient√©, pond√©r√©/non-pond√©r√©) avant de choisir l\'algorithme.'
            },
            'listes_piles_files': {
                'topic': 'Listes, Piles et Files',
                'description': 'Ces structures de donn√©es lin√©aires ont chacune leurs sp√©cificit√©s et cas d\'usage.',
                'tips': 'Respectez le principe LIFO pour les piles et FIFO pour les files.'
            },
            'sql': {
                'topic': 'Langage SQL',
                'description': 'SQL permet d\'interroger et de manipuler des bases de donn√©es relationnelles.',
                'tips': 'Commencez par bien comprendre la structure de la base avant d\'√©crire vos requ√™tes.'
            }
        }
        
        intro_data = introductions.get(subject, {
            'topic': 'Exercices',
            'description': 'Cette fiche d\'exercices vous permettra de pratiquer les concepts √©tudi√©s.',
            'tips': 'Lisez attentivement les √©nonc√©s et n\'h√©sitez pas √† faire des sch√©mas.'
        })
        
        return f'''
        <div class="exercise-card intro">
            <h3>üìö Introduction - {intro_data['topic']}</h3>
            <div class="exercise-content">
                <p>{intro_data['description']}</p>
                <div class="alert alert-info">
                    <p><strong>üí° Conseils</strong></p>
                    <p>{intro_data['tips']}</p>
                </div>
            </div>
        </div>
        '''
    
    def organize_exercises_by_difficulty(self, exercises: List[Dict]) -> Dict:
        """
        Organise automatiquement les exercices par difficult√©.
        """
        organized = {'easy': [], 'medium': [], 'hard': []}
        
        for i, exercise in enumerate(exercises):
            # Heuristiques pour d√©terminer la difficult√©
            title = exercise['title'].lower()
            content = exercise['content'].lower()
            
            # Mots-cl√©s pour difficult√© facile
            easy_keywords = ['simple', 'basique', 'introduction', 'rappel', 'd√©finition']
            # Mots-cl√©s pour difficult√© difficile
            hard_keywords = ['complexe', 'avanc√©', 'optimisation', 'algorithme', 'r√©cursif']
            
            if any(keyword in title or keyword in content for keyword in easy_keywords):
                difficulty = 'easy'
            elif any(keyword in title or keyword in content for keyword in hard_keywords):
                difficulty = 'hard'
            elif i < len(exercises) // 3:  # Premier tiers = facile
                difficulty = 'easy'
            elif i < 2 * len(exercises) // 3:  # Deuxi√®me tiers = moyen
                difficulty = 'medium'
            else:  # Dernier tiers = difficile
                difficulty = 'hard'
            
            organized[difficulty].append(exercise)
        
        return organized
    
    def generate_exercise_cards(self, exercises: List[Dict], difficulty: str) -> str:
        """
        G√©n√®re les cartes d'exercices pour une difficult√© donn√©e.
        """
        if not exercises:
            return f'''
            <div class="exercise-card {difficulty}">
                <h3>Exercices {difficulty.capitalize()}</h3>
                <div class="exercise-content">
                    <p>Exercices √† venir dans cette section...</p>
                </div>
            </div>
            '''
        
        cards_html = []
        for i, exercise in enumerate(exercises, 1):
            card_html = f'''
            <div class="exercise-card {difficulty}">
                <h3>Exercice {i} : {exercise['title']}</h3>
                <div class="exercise-content">
                    {exercise['content']}
                </div>
                <button class="toggle-solution" onclick="toggleSolution(this)">‚Üí Voir la correction</button>
                <div class="solution-wrapper">
                    <div class="solution">
                        <h4>üí° Solution :</h4>
                        {exercise['solution']}
                    </div>
                </div>
            </div>
            '''
            cards_html.append(card_html)
        
        return '\n'.join(cards_html)
    
    def fix_exercise_sheet(self, file_path: str) -> bool:
        """
        Corrige une fiche d'exercices en utilisant le syst√®me de templates.
        """
        try:
            # Lire le fichier existant
            with open(file_path, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            # Extraire le contenu existant
            extracted = self.extract_existing_content(original_content)
            
            # D√©terminer le sujet √† partir du nom de fichier
            filename = Path(file_path).name.lower()
            subject = 'exercices'
            if 'rappel' in filename:
                subject = 'rappels'
            elif 'arbre' in filename:
                subject = 'arbres'
            elif 'graphe' in filename:
                subject = 'graphes'
            elif 'liste' in filename or 'pile' in filename or 'file' in filename:
                subject = 'listes_piles_files'
            elif 'sql' in filename:
                subject = 'sql'
            
            # G√©n√©rer les sections
            intro_html = self.generate_introduction_section(subject)
            
            # Organiser les exercices existants
            all_exercises = []
            for difficulty in ['intro', 'easy', 'medium', 'hard']:
                all_exercises.extend(extracted['exercises'][difficulty])
            
            if all_exercises:
                organized = self.organize_exercises_by_difficulty(all_exercises)
            else:
                # Cr√©er des exercices par d√©faut si aucun n'existe
                organized = {
                    'easy': [{
                        'title': 'Exercice de base',
                        'content': '<p>Exercice √† d√©finir...</p>',
                        'solution': '<p>Solution √† d√©finir...</p>'
                    }],
                    'medium': [],
                    'hard': []
                }
            
            easy_html = self.generate_exercise_cards(organized['easy'], 'easy')
            medium_html = self.generate_exercise_cards(organized['medium'], 'medium')
            hard_html = self.generate_exercise_cards(organized['hard'], 'hard')
            
            # Remplacer les placeholders dans le template
            new_content = self.base_template.replace('{{TITLE}}', extracted['title'])
            new_content = new_content.replace('{{SUBTITLE}}', '')
            new_content = new_content.replace('{{INTRO_CONTENT}}', intro_html)
            new_content = new_content.replace('{{EASY_CONTENT}}', easy_html)
            new_content = new_content.replace('{{MEDIUM_CONTENT}}', medium_html)
            new_content = new_content.replace('{{HARD_CONTENT}}', hard_html)
            
            # Sauvegarder le fichier corrig√©
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"‚úÖ Fiche corrig√©e: {Path(file_path).name}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la correction de {file_path}: {e}")
            return False

def main():
    if len(sys.argv) < 2:
        print("Usage: python fix_exercise_sheets.py <file_or_directory>")
        sys.exit(1)
    
    target = sys.argv[1]
    
    # Chemins des r√©pertoires
    script_dir = Path(__file__).parent
    templates_dir = script_dir.parent / "templates"
    
    # Cr√©er le correcteur
    fixer = ExerciseSheetFixer(str(templates_dir))
    
    files_to_fix = []
    
    if os.path.isfile(target):
        files_to_fix.append(target)
    elif os.path.isdir(target):
        # Trouver tous les fichiers d'exercices
        for root, dirs, files in os.walk(target):
            for file in files:
                if file.endswith('.html') and ('fiche' in file.lower() or 'exercice' in file.lower()):
                    files_to_fix.append(os.path.join(root, file))
    else:
        print(f"‚ùå Fichier ou r√©pertoire non trouv√©: {target}")
        sys.exit(1)
    
    if not files_to_fix:
        print("‚ùå Aucun fichier d'exercice trouv√©")
        sys.exit(1)
    
    print(f"üîß Correction de {len(files_to_fix)} fichier(s)...")
    
    success_count = 0
    for file_path in files_to_fix:
        if fixer.fix_exercise_sheet(file_path):
            success_count += 1
    
    print(f"\nüìä R√©sum√©: {success_count}/{len(files_to_fix)} fichiers corrig√©s avec succ√®s")
    
    if success_count == len(files_to_fix):
        print("‚úÖ Toutes les corrections ont √©t√© appliqu√©es!")
    else:
        print("‚ö†Ô∏è Certaines corrections ont √©chou√©")

if __name__ == "__main__":
    main()