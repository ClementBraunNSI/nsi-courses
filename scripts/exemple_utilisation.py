#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'exemple pour utiliser le parser JSON vers HTML
Cr√©e plusieurs fiches d'exercices de d√©monstration
"""

import json
import os
import subprocess
from pathlib import Path

def create_example_exercises():
    """Cr√©e des fichiers JSON d'exemple pour diff√©rents sujets."""
    
    # Exercices sur les variables et types
    variables_exercises = {
        "facile": [
            {
                "nom": "D√©claration de variables",
                "enonce": "Cr√©ez trois variables : nom (cha√Æne), age (entier), et taille (flottant). Affichez leurs valeurs.",
                "exemple": "nom = 'Alice', age = 25, taille = 1.65",
                "correction": "nom = 'Alice'\nage = 25\ntaille = 1.65\nprint(f'Nom: {nom}, Age: {age}, Taille: {taille}m')"
            },
            {
                "nom": "Calculs simples",
                "enonce": "Calculez et affichez la somme, diff√©rence, produit et quotient de deux nombres.",
                "exemple": "a = 10, b = 3",
                "correction": "a = 10\nb = 3\nprint(f'Somme: {a + b}')\nprint(f'Diff√©rence: {a - b}')\nprint(f'Produit: {a * b}')\nprint(f'Quotient: {a / b}')"
            }
        ],
        "moyen": [
            {
                "nom": "Conversion de types",
                "enonce": "Demandez √† l'utilisateur son √¢ge (cha√Æne), convertissez-le en entier et calculez son √¢ge dans 10 ans.",
                "exemple": "Entr√©e: '25' ‚Üí Sortie: 'Dans 10 ans, vous aurez 35 ans'",
                "correction": "age_str = input('Quel est votre √¢ge ? ')\nage = int(age_str)\nage_futur = age + 10\nprint(f'Dans 10 ans, vous aurez {age_futur} ans')"
            }
        ],
        "difficile": [
            {
                "nom": "Calculatrice avec gestion d'erreurs",
                "enonce": "Cr√©ez une calculatrice qui demande deux nombres et une op√©ration (+, -, *, /). G√©rez la division par z√©ro.",
                "exemple": "Entr√©e: 10, 0, '/' ‚Üí Sortie: 'Erreur: division par z√©ro'",
                "correction": "try:\n    a = float(input('Premier nombre: '))\n    b = float(input('Second nombre: '))\n    op = input('Op√©ration (+, -, *, /): ')\n    \n    if op == '+': result = a + b\n    elif op == '-': result = a - b\n    elif op == '*': result = a * b\n    elif op == '/': \n        if b == 0: \n            print('Erreur: division par z√©ro')\n        else: result = a / b\n    else: \n        print('Op√©ration invalide')\n        exit()\n    \n    print(f'R√©sultat: {result}')\nexcept ValueError:\n    print('Erreur: veuillez entrer des nombres valides')"
            }
        ]
    }
    
    # Exercices sur les listes
    listes_exercises = {
        "facile": [
            {
                "nom": "Cr√©ation et acc√®s",
                "enonce": "Cr√©ez une liste de 5 fruits et affichez le premier et le dernier √©l√©ment.",
                "exemple": "fruits = ['pomme', 'banane', 'orange', 'kiwi', 'mangue']",
                "correction": "fruits = ['pomme', 'banane', 'orange', 'kiwi', 'mangue']\nprint(f'Premier fruit: {fruits[0]}')\nprint(f'Dernier fruit: {fruits[-1]}')"
            },
            {
                "nom": "Ajout et suppression",
                "enonce": "Cr√©ez une liste vide, ajoutez 3 nombres, puis supprimez le deuxi√®me √©l√©ment.",
                "exemple": "Liste finale: [10, 30]",
                "correction": "nombres = []\nnombres.append(10)\nnombres.append(20)\nnombres.append(30)\nprint(f'Liste avant: {nombres}')\nnombres.pop(1)  # Supprime l'√©l√©ment √† l'index 1\nprint(f'Liste apr√®s: {nombres}')"
            }
        ],
        "moyen": [
            {
                "nom": "Recherche dans une liste",
                "enonce": "√âcrivez une fonction qui trouve l'index d'un √©l√©ment dans une liste. Retournez -1 si non trouv√©.",
                "exemple": "trouver_index([1, 2, 3, 4], 3) ‚Üí 2",
                "correction": "def trouver_index(liste, element):\n    for i in range(len(liste)):\n        if liste[i] == element:\n            return i\n    return -1\n\n# Test\nliste = [1, 2, 3, 4]\nprint(trouver_index(liste, 3))  # 2\nprint(trouver_index(liste, 5))  # -1"
            }
        ],
        "difficile": [
            {
                "nom": "Tri par s√©lection",
                "enonce": "Impl√©mentez l'algorithme de tri par s√©lection pour trier une liste de nombres.",
                "exemple": "[64, 34, 25, 12] ‚Üí [12, 25, 34, 64]",
                "correction": "def tri_selection(liste):\n    n = len(liste)\n    for i in range(n):\n        # Trouver l'index du minimum\n        min_idx = i\n        for j in range(i + 1, n):\n            if liste[j] < liste[min_idx]:\n                min_idx = j\n        \n        # √âchanger les √©l√©ments\n        liste[i], liste[min_idx] = liste[min_idx], liste[i]\n    \n    return liste\n\n# Test\nnombres = [64, 34, 25, 12]\nprint(f'Avant tri: {nombres}')\ntri_selection(nombres)\nprint(f'Apr√®s tri: {nombres}')"
            }
        ]
    }
    
    return {
        "variables": variables_exercises,
        "listes": listes_exercises
    }

def generate_html_files(exercises_dict):
    """G√©n√®re les fichiers HTML pour chaque sujet d'exercices."""
    
    # Cr√©er le dossier examples s'il n'existe pas
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    
    for subject, exercises in exercises_dict.items():
        # Cr√©er le fichier JSON
        json_filename = f"examples/exercices_{subject}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(exercises, f, ensure_ascii=False, indent=4)
        
        # G√©n√©rer le fichier HTML
        html_filename = f"examples/fiche_{subject}.html"
        
        try:
            result = subprocess.run([
                "python3", "scripts/json_to_html_parser.py", 
                json_filename, html_filename
            ], capture_output=True, text=True, check=True)
            
            print(f"‚úÖ G√©n√©r√©: {html_filename}")
            print(f"   JSON: {json_filename}")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration de {html_filename}:")
            print(f"   {e.stderr}")

def main():
    """Fonction principale."""
    print("üöÄ G√©n√©ration d'exemples de fiches d'exercices...\n")
    
    # Cr√©er les exercices d'exemple
    exercises_dict = create_example_exercises()
    
    # G√©n√©rer les fichiers HTML
    generate_html_files(exercises_dict)
    
    print("\nüìã R√©sum√© des fichiers g√©n√©r√©s:")
    print("   - examples/exercices_variables.json + fiche_variables.html")
    print("   - examples/exercices_listes.json + fiche_listes.html")
    print("   - examples/exercices_boucles.json + fiche_boucles.html (existant)")
    
    print("\nüí° Pour ouvrir une fiche dans le navigateur:")
    print("   open examples/fiche_variables.html")
    print("   open examples/fiche_listes.html")
    print("   open examples/fiche_boucles.html")
    
    print("\nüîß Pour cr√©er vos propres fiches:")
    print("   1. Cr√©ez un fichier JSON avec la structure appropri√©e")
    print("   2. Utilisez: python3 scripts/json_to_html_parser.py votre_fichier.json sortie.html")

if __name__ == "__main__":
    main()