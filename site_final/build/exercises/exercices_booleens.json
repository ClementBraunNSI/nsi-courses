{
  "facile": [
    {
      "nom": "Comprendre les booléens",
      "enonce": "Quel sera le résultat de ces expressions ? `True` ou `False`.\n\n1. `10 > 5`\n2. `7 == 9`\n3. `3 <= 3`\n4. `False != True`\n5. `not False`\n6. `5 != 5`",
      "exemple": "1. True\n2. False\n3. True\n4. True\n5. True\n6. False",
      "correction": "# Résultats des expressions booléennes :\n# 1. 10 > 5 → True (10 est supérieur à 5)\n# 2. 7 == 9 → False (7 n'est pas égal à 9)\n# 3. 3 <= 3 → True (3 est inférieur ou égal à 3)\n# 4. False != True → True (False est différent de True)\n# 5. not False → True (l'inverse de False est True)\n# 6. 5 != 5 → False (5 n'est pas différent de 5)"
    },
    {
      "nom": "Comparaisons simples",
      "enonce": "Donner le résultat des expressions suivantes :\n\n1. `8 == 8`\n2. `4 != 2`\n3. `7 > 10`\n4. `6 >= 6`\n5. `3 < 8`",
      "exemple": "1. True\n2. True\n3. False\n4. True\n5. True",
      "correction": "# Résultats des comparaisons :\n# 1. 8 == 8 → True (8 est égal à 8)\n# 2. 4 != 2 → True (4 est différent de 2)\n# 3. 7 > 10 → False (7 n'est pas supérieur à 10)\n# 4. 6 >= 6 → True (6 est supérieur ou égal à 6)\n# 5. 3 < 8 → True (3 est inférieur à 8)"
    }
  ],
  "moyen": [
    {
      "nom": "Opérateurs logiques",
      "enonce": "Pour chaque expression, écrire le résultat (`True` ou `False`).\n\n1. `(5 > 3) and (2 == 2)`\n2. `(4 < 1) or (6 != 5)`\n3. `not (10 == 10)`\n4. `(7 <= 7) and (8 > 9)`\n5. `not ((3 != 3) or (5 < 2))`",
      "exemple": "1. True\n2. True\n3. False\n4. False\n5. True",
      "correction": "# Résultats des expressions logiques :\n# 1. (5 > 3) and (2 == 2) → True and True → True\n# 2. (4 < 1) or (6 != 5) → False or True → True\n# 3. not (10 == 10) → not True → False\n# 4. (7 <= 7) and (8 > 9) → True and False → False\n# 5. not ((3 != 3) or (5 < 2)) → not (False or False) → not False → True"
    },
    {
      "nom": "Expressions booléennes complexes",
      "enonce": "Évaluer les expressions booléennes suivantes avec x = 10 :\n\n1. `x > 5 and x < 15`\n2. `x == 10 or x == 20`\n3. `not (x < 5)`\n4. `x % 2 == 0 and x > 0`\n5. `(x > 15) or (x < 5) or (x == 10)`",
      "exemple": "Pour x = 10 :\n1. True\n2. True\n3. True\n4. True\n5. True",
      "correction": "# Pour x = 10 :\n# 1. 10 > 5 and 10 < 15 → True and True → True\n# 2. 10 == 10 or 10 == 20 → True or False → True\n# 3. not (10 < 5) → not False → True\n# 4. 10 % 2 == 0 and 10 > 0 → True and True → True\n# 5. (10 > 15) or (10 < 5) or (10 == 10) → False or False or True → True"
    }
  ],
  "difficile": [
    {
      "nom": "Logique booléenne avancée",
      "enonce": "Simplifier les expressions booléennes suivantes et donner leur valeur pour a = True, b = False :\n\n1. `(a and b) or (a and not b)`\n2. `not (a or b) and (a or not b)`\n3. `(a and b) or (not a and not b)`\n4. `not ((a and b) or (not a and not b))`",
      "exemple": "Pour a = True, b = False :\n1. True\n2. False\n3. False\n4. True",
      "correction": "# Pour a = True, b = False :\n# 1. (True and False) or (True and not False)\n#    = False or (True and True) = False or True = True\n# 2. not (True or False) and (True or not False)\n#    = not True and (True or True) = False and True = False\n# 3. (True and False) or (not True and not False)\n#    = False or (False and True) = False or False = False\n# 4. not ((True and False) or (not True and not False))\n#    = not (False or False) = not False = True"
    }
  ]
}