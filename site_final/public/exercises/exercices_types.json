{
  "facile": [
    {
      "nom": "Types en Python",
      "enonce": "Donner les types des valeurs suivantes : `13`, `14.5`, `'Hello World!'`, `True`, `'15.5'`",
      "exemple": "13 → int\n14.5 → float\n'Hello World!' → str\nTrue → bool\n'15.5' → str",
      "correction": "# Types des valeurs :\n# 13 → int (entier)\n# 14.5 → float (nombre à virgule)\n# 'Hello World!' → str (chaîne de caractères)\n# True → bool (booléen)\n# '15.5' → str (chaîne de caractères, pas un nombre car entre guillemets)"
    },
    {
      "nom": "Table de vérité XOR",
      "enonce": "À l'aide de python, écrire un programme qui affiche dans le terminal la table de vérité de la fonction booléenne `xor`.",
      "exemple": "Table de vérité du XOR\na b s\n0 0 0\n0 1 1\n1 0 1\n1 1 0",
      "correction": "print('Table de vérité du XOR')\nprint('a','b','s')\nprint(0,0,0)\nprint(0,1,1)\nprint(1,0,1)\nprint(1,1,0)"
    },
    {
      "nom": "Somme de deux nombres",
      "enonce": "Écrire un programme qui permet d'afficher la somme de deux nombres entiers de la forme 'La somme est x+y' avec x et y défini précédemment.",
      "exemple": "La somme est 7",
      "correction": "x = 4\ny = 3\nprint('La somme est', x+y)"
    },
    {
      "nom": "Affichage amélioré",
      "enonce": "Améliorer le programme précédent pour qu'il affiche 'La somme de x et y est x+y'.",
      "exemple": "La somme de 4 et 3 est 7",
      "correction": "x = 4\ny = 3\nprint('La somme de',x, ' et ', y, ' est ', x+y)"
    },
    {
      "nom": "Concaténation de chaînes",
      "enonce": "Écrire un programme qui instancie deux chaînes de caractères, les concatène et affiche le résultat sous la forme `'La chaîne résultante est : [résultat]'`.",
      "exemple": "La chaîne résultante est : BonjourAu Revoir",
      "correction": "chaine_a = \"Bonjour\"\nchaine_b = \"Au Revoir\"\nprint(\"La chaîne résultante est :\", chaine_a+chaine_b)"
    },
    {
      "nom": "Parité d'un nombre",
      "enonce": "Écrire un programme qui affiche dans le terminal si un nombre est pair ou impair.",
      "exemple": "Entrez un nombre: 4\npair",
      "correction": "a = int(input(\"Entrez un nombre\"))\nif a % 2 == 0:  # Si le reste de la division de a par 2 est 0 -> Si 2 divise a\n    print(\"pair\")\nelse:\n    print(\"impair\")"
    },
    {
      "nom": "Maximum entre trois nombres",
      "enonce": "Écrire un programme qui permet de trouver la valeur maximale entre trois variables entières. Ce programme affichera dans la console : \"Le nombre `x` est plus grand que `y` et `z`.\"",
      "exemple": "Valeur 1: 8\nValeur 2: 5\nValeur 3: 3\n8 est la plus grande",
      "correction": "val_1 = int(input(\"Valeur 1\"))\nval_2 = int(input(\"Valeur 2\"))\nval_3 = int(input(\"Valeur 3\"))\nif val_1 > val_2 and val_1 > val_3:\n    print(val_1, \" est la plus grande\")\nelif val_2 > val_1 and val_2 > val_3:\n    print(val_2, \" est la plus grande\")\nelif val_3 > val_1 and val_3 > val_2:\n    print(val_3, \" est la plus grande\")"
    },
    {
      "nom": "Calculatrice basique",
      "enonce": "Écrire un programme qui est une calculatrice basique. Elle demandera à l'utilisateur 2 nombres entiers `a` et `b` et un opérateur (`+`,`-`,`*`,`/`). Ce programme affichera : L'opération `a` `operateur` `b` vaut ...",
      "exemple": "Entrez un premier nombre: 10\nEntrez un second nombre: 5\nEntrez un opérateur : + - / *: +\n15",
      "correction": "a = int(input(\"Entrez un premier nombre\"))\nb = int(input(\"Entrez un second nombre\"))\noperateur = input(\"Entrez un opérateur : + - / *\")\nif operateur == \"+\":\n    print(a+b)\nelif operateur == \"-\":\n    print(a-b)\nelif operateur == \"*\":\n    print(a*b)\nelif operateur == \"/\":\n    # On ne peut pas diviser par zéro\n    if b != 0:\n        print(a/b)"
    },
    {
      "nom": "Profit ou perte",
      "enonce": "Écrire un programme qui étant donné deux valeurs cout_de_production et prix_de_vente, affiche dans le terminal `profit` si le cout est inférieur au prix de vente, `perte` sinon.",
      "exemple": "Entrez un prix de vente: 100\nEntrez un coût de production: 80\nprofit",
      "correction": "prix_de_vente = int(input(\"Entrez un prix de vente\"))\ncout_de_production = int(input(\"Entrez un coût de production\"))\n\nif prix_de_vente > cout_de_production:\n    print(\"profit\")\nelif prix_de_vente == cout_de_production:\n    print(\"pas de marge\")\nelse:\n    print(\"perte\")"
    }
  ],
  "moyen": [
    {
      "nom": "Étude de code - Analyse de programmes",
      "enonce": "Évaluer les valeurs de result à la fin de chaque programme :\n\n```python\nx = 8\ny = 6\nif x > y:\n    result = x - y\nelse:\n    result = y - x\n```\n\n```python\na = 4\nb = 9\nif a < b:\n    result = a + b\nelse:\n    result = a * b\n```\n\n```python\nm = 7\nn = 3\nif m % 2 == 0:\n    result = m * n\nelse:\n    result = m + n\n```",
      "exemple": "Programme 1: result = 2\nProgramme 2: result = 13\nProgramme 3: result = 10",
      "correction": "# Programme 1:\n# x = 8, y = 6\n# x > y est True (8 > 6)\n# donc result = x - y = 8 - 6 = 2\n\n# Programme 2:\n# a = 4, b = 9\n# a < b est True (4 < 9)\n# donc result = a + b = 4 + 9 = 13\n\n# Programme 3:\n# m = 7, n = 3\n# m % 2 == 0 est False (7 % 2 = 1, pas 0)\n# donc result = m + n = 7 + 3 = 10"
    },
    {
      "nom": "Évaluation d'expressions booléennes",
      "enonce": "À l'aide de python, évaluer les résultats de ces comparaisons avec x = 5, x = 10 et x = -20 :\n1. x < 20 and x > -20\n2. x > 5 or x < 3\n3. not (x == 10)\n4. x >= 0 and x <= 10\n5. x % 2 == 0 or x % 3 == 0\n6. x < 0 or (x > 0 and x % 2 != 0)",
      "exemple": "Pour x = 5:\n1. True\n2. False\n3. True\n4. True\n5. False\n6. True",
      "correction": "# Pour x = 5:\n# 1. 5 < 20 and 5 > -20 → True and True → True\n# 2. 5 > 5 or 5 < 3 → False or False → False\n# 3. not (5 == 10) → not False → True\n# 4. 5 >= 0 and 5 <= 10 → True and True → True\n# 5. 5 % 2 == 0 or 5 % 3 == 0 → False or False → False\n# 6. 5 < 0 or (5 > 0 and 5 % 2 != 0) → False or (True and True) → True\n\n# Pour x = 10:\n# 1. True, 2. True, 3. False, 4. True, 5. True, 6. False\n\n# Pour x = -20:\n# 1. False, 2. True, 3. True, 4. False, 5. True, 6. True"
    },
    {
      "nom": "Mentions au baccalauréat",
      "enonce": "Écrire un programme qui prend une note sur 20 et affiche dans le terminal si l'étudiant a obtenu une mention :\n- 'Très bien' pour une note supérieure ou égale à 16.\n- 'Bien' pour une note entre 14 et 15.\n- 'Assez bien' pour une note entre 12 et 13.\n- 'Passable' pour une note entre 10 et 11.\n- 'Échec' pour une note inférieure à 10.",
      "exemple": "Entrez une note sur 20 : 15.5\nMention : Bien",
      "correction": "# Demander à l'utilisateur de saisir une note\nnote = float(input(\"Entrez une note sur 20 : \"))\n\n# Vérifier la mention correspondante et afficher le résultat\nif note >= 16:\n    print(\"Mention : Très bien\")\nelif 14 <= note <= 15:\n    print(\"Mention : Bien\")\nelif 12 <= note <= 13:\n    print(\"Mention : Assez bien\")\nelif 10 <= note <= 11:\n    print(\"Mention : Passable\")\nelse:\n    print(\"Mention : Échec\")"
    }
  ],
  "difficile": []
}