{
  "facile": [
    {
      "nom": "Fonction simple",
      "enonce": "Écrire une fonction `dire_bonjour` qui prend en paramètre un nom et renvoie 'Bonjour' suivi du nom.\nExemple : dire_bonjour('Alice') doit renvoyer 'Bonjour Alice'.",
      "exemple": "dire_bonjour('Alice') → 'Bonjour Alice'",
      "correction": "def dire_bonjour(nom: str) -> str:\n    return 'Bonjour ' + nom"
    },
    {
      "nom": "Calcul simple",
      "enonce": "Écrire une fonction `double` qui prend en paramètre un nombre et renvoie son double.\nExemple : double(5) doit renvoyer 10.",
      "exemple": "double(5) → 10",
      "correction": "def double(nombre: int) -> int:\n    return nombre * 2"
    },
    {
      "nom": "Test de parité",
      "enonce": "Écrire une fonction `est_pair` qui prend en paramètre un entier et renvoie `True` s'il est pair, `False` sinon.\nExemple : est_pair(4) doit renvoyer True, est_pair(5) doit renvoyer False.",
      "exemple": "est_pair(4) → True\nest_pair(5) → False",
      "correction": "def est_pair(nombre: int) -> bool:\n    return nombre % 2 == 0"
    },
    {
      "nom": "Maximum de deux nombres",
      "enonce": "Écrire une fonction `maximum` qui prend en paramètres deux nombres et renvoie le plus grand des deux.\nExemple : maximum(3, 7) doit renvoyer 7.",
      "exemple": "maximum(3, 7) → 7",
      "correction": "def maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
      "nom": "Aire d'un rectangle",
      "enonce": "Écrire une fonction `aire_rectangle` qui prend en paramètres la longueur et la largeur d'un rectangle et renvoie son aire.\nExemple : aire_rectangle(5, 3) doit renvoyer 15.",
      "exemple": "aire_rectangle(5, 3) → 15",
      "correction": "def aire_rectangle(longueur: float, largeur: float) -> float:\n    return longueur * largeur"
    }
  ],
  "moyen": [
    {
      "nom": "Calcul de la factorielle",
      "enonce": "Écrire une fonction `factorielle` qui prend en paramètre un entier n et renvoie la factorielle de ce nombre.",
      "exemple": "factorielle(5) → 120",
      "correction": "def factorielle(n: int) -> int:\n    resultat = 1\n    for i in range(1, n + 1):\n        resultat *= i\n    return resultat"
    },
    {
      "nom": "Somme des n premiers entiers",
      "enonce": "Écrire une fonction `somme_n_entiers` qui prend en paramètre un entier `n` et renvoie la somme de tous les entiers de 1 à n.\nExemple : somme_n_entiers(100) doit renvoyer 5050.",
      "exemple": "somme_n_entiers(100) → 5050",
      "correction": "def somme_n_entiers(n: int) -> int:\n    return sum(range(1, n + 1))"
    },
    {
      "nom": "Compter les voyelles",
      "enonce": "Écrire une fonction `compter_voyelles` qui prend en paramètre une chaîne de caractères et renvoie le nombre de voyelles.\nExemple : compter_voyelles('bonjour') doit renvoyer 3.",
      "exemple": "compter_voyelles('bonjour') → 3",
      "correction": "def compter_voyelles(chaine: str) -> int:\n    voyelles = 'aeiouAEIOU'\n    return sum(1 for lettre in chaine if lettre in voyelles)"
    },
    {
      "nom": "Puissance sans opérateur **",
      "enonce": "Écrire une fonction `puissance` qui prend en paramètres deux entiers a et b et renvoie a à la puissance b sans utiliser l'opérateur `**`.\nExemple : puissance(3, 2) doit renvoyer 9.",
      "exemple": "puissance(3, 2) → 9",
      "correction": "def puissance(base: int, exposant: int) -> int:\n    resultat = 1\n    for _ in range(exposant):\n        resultat *= base\n    return resultat"
    },
    {
      "nom": "Nombre premier",
      "enonce": "Écrire une fonction `est_premier` qui prend en paramètre un entier et renvoie `True` s'il est premier, `False` sinon.\nUn nombre est premier uniquement s'il est divisible par 1 et par lui même.\nIndication : pour réussir cet exercice, vous utiliserez une boucle et vous compterez le nombre de diviseurs.\nRappel : un nombre en divise un autre si le reste de leur division est 0. En python, l'opérateur qui obtient le reste de la division est `%`.\nExemple : est_premier(2) doit renvoyer Vrai, est_premier(6) doit renvoyer Faux.",
      "exemple": "est_premier(2) → True\nest_premier(6) → False",
      "correction": "def est_premier(nombre : int)-> bool:\n    diviseurs = 0\n    for i in range(1,nombre+1):\n        if nombre%i == 0:\n            diviseurs = diviseurs + 1\n    if diviseurs == 2 :\n        return True\n    else:\n        return False"
    },
    {
      "nom": "Somme des chiffres d'un nombre",
      "enonce": "Écrire une fonction `somme_chiffres` qui prend un entier en paramètre et renvoie la somme de ses chiffres.\nIndication : Il peut être facile d'utiliser le changement de type en `str`\nExemple : somme_chiffres(1234) doit renvoyer 10 (1+2+3+4)",
      "exemple": "somme_chiffres(1234) → 10",
      "correction": "def somme_chiffres(nombre : int)-> int:\n    somme = 0\n    str_nombre = str(nombre)\n    for chiffre in str_nombre:\n        somme = somme + int(chiffre)\n    return somme"
    }
  ],
  "difficile": [
    {
      "nom": "Nombre parfait",
      "enonce": "Écrire une fonction `nombre_parfait` qui prend en paramètre un entier et renvoie True si la somme de ses diviseurs (sans lui-même) égale le nombre.\nIndication : Si un nombre divise le nombre demandé en paramètre, il peut être judicieux de le mettre dans une liste. Il faudra donc chercher tous ses diviseurs sauf lui-même pour réussir cet exercice.\nExemple : nombre_parfait(6) doit renvoyer True (car 1 + 2 + 3 = 6).",
      "exemple": "nombre_parfait(6) → True",
      "correction": "def nombre_parfait(nombre: int) -> bool:\n    somme = 0\n    for i in range(1, nombre):\n        if nombre % i == 0:\n            somme += i\n    return somme == nombre"
    },
    {
      "nom": "Suite de Fibonacci",
      "enonce": "Écrire une fonction `fibonacci` qui prend en paramètre un entier et affiche les différents termes de la suite de Fibonacci.\nOn rappelle que la suite de Fibonacci est calculée à partir des deux termes précédents.\nF(0) = 0, F(1) = 1, F(2) = 1 + 0 = 1, F(3) = F(2) + F(1) = 1 + 1 = 2, F(4) = F(3) + F(2) = 2 + 1 = 3...\nExemple : fibonacci(5) doit afficher 0, 1, 1, 2, 3, 5.",
      "exemple": "fibonacci(5) → affiche 0, 1, 1, 2, 3, 5",
      "correction": "def fibonacci(n: int) -> None:\n    a, b = 0, 1\n    for _ in range(n + 1):\n        print(a)\n        a, b = b, a + b"
    },
    {
      "nom": "Nombre d'Armstrong",
      "enonce": "Écrire une fonction `nombre_armstrong` qui prend en paramètre un nombre entier et renvoie `True` s'il est un nombre d'Armstrong, `False` sinon.\nUn nombre est un nombre d'Armstrong si la somme des puissances de ses chiffres est égale au nombre lui-même.\nExemple : nombre_armstrong(153) doit renvoyer True car 1³ + 5³ + 3³ = 153.",
      "exemple": "nombre_armstrong(153) → True",
      "correction": "def nombre_armstrong(nombre: int) -> bool:\n    somme = 0\n    str_nombre = str(nombre)\n    puissance = len(str_nombre)\n    for chiffre in str_nombre:\n        somme += int(chiffre) ** puissance\n    return somme == nombre"
    },
    {
      "nom": "Somme des nombres premiers",
      "enonce": "Écrire une fonction `somme_premiers` qui prend en paramètre un entier n et renvoie la somme des nombres premiers jusque n (compris).\nExemple : somme_premiers(10) doit renvoyer 17 car les nombres premiers inférieurs à 10 sont 2, 3, 5, et 7 (2 + 3 + 5 + 7 = 17).",
      "exemple": "somme_premiers(10) → 17",
      "correction": "def somme_premiers(n:int)-> int:\n    somme = 0\n    for i in range(n+1):\n        #On dispose d'une fonction qui renvoie True s'il est premier\n        if est_premier(i):\n            somme = somme +i\n    return somme"
    },
    {
      "nom": "Compter les occurrences",
      "enonce": "Écrire une fonction `compter_occurences` qui prend en paramètres une chaîne de caractères et un caractère, et renvoie le nombre de fois que le caractère apparaît dans la chaîne.\nExemple : compter_occurences('programmation', 'm') doit renvoyer 2.",
      "exemple": "compter_occurences('programmation', 'm') → 2",
      "correction": "def compter_occurences(chaine: str, caractere: str) -> int:\n    occurences = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            occurences = occurences + 1\n    return occurences"
    },
    {
      "nom": "Tétration",
      "enonce": "Écrire une fonction `tetration` qui prend en paramètre un nombre `n` et un tétré `t` et renvoie la tétration du nombre par le tétré.\nExemple : tetration(3, 3) doit renvoyer 7625597484987.",
      "exemple": "tetration(3, 3) → 7625597484987",
      "correction": "def tetration(n: int, t: int) -> int:\n    if t == 0:\n        return 1\n    result = n\n    for i in range(t - 1):\n        result = n ** result\n    return result"
    }
  ]
}