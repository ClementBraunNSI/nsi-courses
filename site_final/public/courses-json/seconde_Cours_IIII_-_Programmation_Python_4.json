{
  "title": "Structures conditionnelles",
  "sections": [
    {
      "level": 2,
      "title": "Définitions",
      "content": "Une **variable** booléenne est une variable qui peut prendre **deux états** : **Vrai ou Faux**. Ces états peuvent être équivalents à des valeurs numériques : Vrai = 1 et Faux = 0.\nCes états correspondent en machine **à la présence du courant ou non**.\n\nUne **fonction booléenne** est une fonction qui prend en paramètre **des variables booléennes** et en ressort un résultat.\n\nUne **équation booléenne** est un ensemble de fonctions booléenne prenant en paramètre un certain nombre de variables et renvoie un résultat en sortie."
    },
    {
      "level": 2,
      "title": "Fonctions booléennes",
      "content": "| Fonction NOT | Fonction OR | Fonction AND |\n| :----------: | :---------: | :----------: |\n| ![](not.png)| ![](or.png)| ![](and.png)|"
    },
    {
      "level": 2,
      "title": "Exemples",
      "content": "En Python, on peut réaliser des opérations booléennes pour réaliser des **conditions**. Ces conditions permettent de réaliser du code, comme ce qui a été vu au collège avec les `logigrammes` ou `algorigrammes`.\n\nEn Python, pour indiquer qu'une chose est vraie, on écrit `True` ou fausse `False`.\n\nIl existe les opérateurs :\n\n- a == b : qui signifie `Est-ce que a est égal à b?`\n- a != b : qui signifie `Est-ce que a est différent de b?`\n- Les opérateurs mathématiques de base : `> , < , >= , <=`\n\n1. `10 > 5` ➔ `True`\n2. `7 == 9` ➔ `False`\n3. `3 <= 3` ➔ `True`\n4. `False != True` ➔ `_______`\n5. `not False` ➔ `_______` (Fonction booléenne NOT, voir tableau)\n6. `5 != 5` ➔ `_______`\n7. `False != True and 5 == 5` ➔ `______` (Fonction booléenne AND, voir tableau)\n8. `not True or 4 > 99` ➔ `______` (Fonction booléenne OR, voir tableau)"
    }
  ],
  "metadata": {
    "level": "seconde",
    "chapter": "IIII_-_Programmation_Python",
    "hasStyles": false,
    "cardTypes": [],
    "sourceFile": "IIII_-_Programmation_Python/structures_conditionnelles.md"
  }
}