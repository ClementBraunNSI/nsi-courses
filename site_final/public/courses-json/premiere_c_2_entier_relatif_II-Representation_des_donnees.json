{
  "title": "Entiers négatifs en Binaire",
  "sections": [
    {
      "level": 2,
      "title": "Les entiers négatifs",
      "content": "Le cours précédent a permis d'expliquer comment représenter les nombres entiers positifs en base 2 pour en permettre le traitement par un ordinateur.\nCependant, toutes les grandeurs ne sont pas exclusivement positives : tension alternative, accéleration d'un freinage etc...\nPour pouvoir réaliser des simulations ou des traitements, il va falloir pouvoir représenter les nombres négatifs."
    },
    {
      "level": 3,
      "title": "Première tentative : le bit de signe",
      "content": "Une première technique de représentation des nombres négatifs est d'ajouter un bit de poids fort (tout à gauche) qui représente le signe : 1 représente un nombre négatif et 0 un nombre positif.\nExemple  : $1001_2$ représente sur 4 bits signés le chiffre $-1$, $0100_2$ représente sur 4 bits signés le chiffre $4$.\nCela pourrait sembler être une bonne tentative cependant, deux problèmes se posent :\n- Un chiffre peut avoir 2 représentations : Le cas du 0\nEn effet, 0 n'est ni positif ni négatif. On peut donc en déduire 2 représentations sur 4 bits par exemple : $1000_2$ et $0000_2$.\nCependant, avoir 2 représentations pour un même chiffre n'est pas concevable notamment pour les représentations en mémoire ou bien pour les opérations.\n- Les opérations ne sont pas correctes :\nOn veut réaliser l'opération $-13 + 13$ en binaire sur 5 bits.\nOn a alors :\n$11101_2 + 01101_2 = 101010_2$\nSur 5 bits, on a alors : $11101_2 + 01101_2 = 01010_2$. Cependant, $-13+13 = 0$ et $01010_2 = +10_{10}$.\nCela montre que cette représentation n'est pas utilisable."
    }
  ],
  "metadata": {
    "level": "premiere",
    "chapter": "",
    "hasStyles": false,
    "cardTypes": []
  }
}